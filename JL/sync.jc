module sync
  rmdl  io
  mdst  io
  res   2147483647
  push
  res   self
  fld   INIFINITE
  res   0
  push
  res   self
  fld   LOCK_ACQUIRED

class AtomicInt
  jmp   13

@new
  set   orig
  res   orig
  push
  res   self
  fld   i
  res   Mutex
  push
  call
  push
  res   self
  fld   mutex
  res   self
  ret
  jmp   14

@set
  set   v
  res   self
  get   mutex
  push
  call  acquire
  res   v
  push
  res   self
  fld   i
  res   self
  get   mutex
  push
  call  release
  ret
  jmp   14

@get
  res   self
  get   mutex
  push
  call  acquire
  res   self
  get   i
  set   cpy
  res   self
  get   mutex
  push
  call  release
  res   cpy
  ret
  ret
  jmp   19

@inc
  set   a
  res   self
  get   mutex
  push
  call  acquire
  res   self
  get   i
  push
  res   a
  push
  add
  push
  res   self
  fld   i
  res   self
  get   mutex
  push
  call  release
  ret
  jmp   17

@to_s
  res   self
  get   mutex
  push
  call  acquire
  res   str
  push
  res   self
  get   i
  call
  set   tos
  res   self
  get   mutex
  push
  call  release
  res   tos
  ret
  ret
endclass


class ThreadPoolExecutor
  jmp   86

@new
  set   num_threads
  res   num_threads
  push
  res   self
  fld   num_threads
  res   Mutex
  push
  call
  push
  res   self
  fld   mutex
  res   Semaphore
  push
  res   num_threads
  push
  res   0
  push
  tupl  2
  call
  push
  res   self
  fld   task_lock
  anew
  push
  res   self
  fld   threads
  anew
  push
  res   self
  fld   tasks
  nblk
  res   0
  set   i
  res   i
  push
  res   num_threads
  push
  lt
  ifn   20
  res   self
  get   threads
  push
  res   Thread
  push
  res   None
  push
  res   self
  get   execute_task
  push
  tupl  2
  call
  call  append
  res   i
  push
  res   1
  push
  add
  set   i
  jmp   -25
  bblck
  nblk
  res   self
  get   threads
  push
  call  iter
  push
  dup
  call  has_next
  ifn   13
  dup
  call  next
  push
  tget  0
  set   _
  peek
  res
  tget  1
  set   t
  res   t
  push
  call  start
  jmp   -16
  res
  bblck
  res   self
  ret
  jmp   54

@execute_task
  res   None
  set   task
  nblk
  res   True
  ifn   47
  res   self
  get   task_lock
  push
  res   INFINITE
  call  lock
  res   self
  get   mutex
  push
  call  acquire
  res   self
  get   tasks
  get   len
  push
  res   0
  push
  gt
  if    5
  res   self
  get   task_lock
  push
  call  unlock
  jmp   9
  res   self
  get   tasks
  push
  res   1
  call  pop
  push
  res   0
  aidx
  set   task
  res   self
  get   mutex
  push
  call  release
  res   task
  push
  res   None
  push
  neq
  ifn   5
  res   task
  push
  call  exec
  res   None
  set   task
  jmp   -50
  bblck
  ret
  jmp   21

@execute_future
  set   f
  res   self
  get   mutex
  push
  call  acquire
  res   self
  get   tasks
  push
  res   f
  call  append
  res   self
  get   mutex
  push
  call  release
  res   self
  get   task_lock
  push
  call  unlock
  res   f
  ret
  ret
  jmp   31

@execute
  push
  tget  0
  set   fn
  peek
  tlen
  push
  push  1
  lte
  if    3
  peek
  tget  1
  jmp   1
  res   None
  set   args
  res   Future
  push
  res   self
  push
  res   args
  push
  res   fn
  push
  tupl  3
  call
  set   f
  res   self
  push
  res   f
  call  execute_future
  ret
  ret
endclass


class Future
  jmp   53

@new
  push
  tget  0
  set   fn
  peek
  tget  1
  set   args
  peek
  res
  tget  2
  set   ex
  res   fn
  push
  res   self
  fld   fn
  res   args
  push
  res   self
  fld   args
  res   ex
  push
  res   self
  fld   ex
  anew
  push
  res   self
  fld   listeners
  res   Mutex
  push
  call
  push
  res   self
  fld   listeners_mutex
  res   None
  push
  res   self
  fld   result
  res   False
  push
  res   self
  fld   has_result
  res   Semaphore
  push
  res   1
  push
  res   0
  push
  tupl  2
  call
  push
  res   self
  fld   read_mutex
  res   self
  ret
  jmp   56

@exec
  res   self
  push
  res   self
  get   args
  call  fn
  push
  res   self
  fld   result
  res   self
  get   listeners_mutex
  push
  call  acquire
  res   True
  push
  res   self
  fld   has_result
  nblk
  res   self
  get   listeners
  push
  call  iter
  push
  dup
  call  has_next
  ifn   20
  dup
  call  next
  push
  tget  0
  set   _
  peek
  res
  tget  1
  set   f
  res   self
  get   result
  push
  res   f
  fld   args
  res   self
  get   ex
  push
  res   f
  call  execute_future
  jmp   -23
  res
  bblck
  res   self
  get   listeners_mutex
  push
  call  release
  res   self
  get   read_mutex
  push
  call  unlock
  ret
  jmp   27

@get
  nblk
  res   True
  ifn   22
  res   self
  get   read_mutex
  push
  res   INFINITE
  call  lock
  res   self
  get   has_result
  not
  ifn   5
  res   self
  get   read_mutex
  push
  call  unlock
  jmp   -14
  res   self
  get   read_mutex
  push
  call  unlock
  res   self
  get   result
  ret
  jmp   -25
  bblck
  ret
  jmp   37

@thenDo
  set   fn
  res   Future
  push
  res   self
  get   ex
  push
  res   None
  push
  res   fn
  push
  tupl  3
  call
  set   f
  res   self
  get   listeners_mutex
  push
  call  acquire
  res   self
  get   has_result
  if    6
  res   self
  get   listeners
  push
  res   f
  call  append
  jmp   4
  res   ex
  push
  res   f
  call  execute_future
  res   self
  get   listeners_mutex
  push
  call  release
  res   f
  ret
  ret
  jmp   4

@wait
  res   self
  push
  call  get
  ret
endclass

  exit  0
